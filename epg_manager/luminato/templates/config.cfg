#!/usr/bin/perl
#
# cherryEPG.pl
#
# (c) 2013 Bojan Ramsak, <info@epg.cherryhill.eu>
#
# Glue code for showing the usage of DVB::Epg and DVB::Carousel packages and
# implementing a simple EPG generator. Ringelspiel is the coresponging data
# carousel for doing the playout.
#
# cherryEPG is free software; you can redistribute it and/or modify it under
# the terms of the Artistic License v2.0.
#
# Additional information on http://epg.cherryhill.eu
## -----------------------------------------------------------------------------
use strict;
use warnings;
use Getopt::Std;
use DVB::Epg;
use DVB::Carousel;
use Carp;
use Time::Local;

# read arguments
my %args;

# default
my $eitDb = "eit.sqlite";
my $carouselDb = "carousel.sqlite";
my $myEpg;
my $myCarousel;

getopts( "bihf:x", \%args );

print "cherryEPG.pl - Copyright 2013 Bojan Ramsak\n";

showHelp() if exists $args{h} or scalar( keys %args) == 0;

# create objects
$myEpg = DVB::Epg->new( $eitDb ) || die( "Error opening EIT database [$eitDb]: $!");
$myCarousel = DVB::Carousel->new( $carouselDb) || die( "Error opening carousel database [$carouselDb]: $!");

# initialize both databases
if( $args{i}) {
    print "Initializing EIT database [$eitDb]\n";
    $myEpg->initdb() || die( "Initialization of EIT database failed");

    # add program to final EIT
    # PID (18), serviceId (8204), originalNetworkId ( 0x013e), transportstreamId (1), uid (1),  number_of_segments (3days*8), actual (1)

{% for channel in channels %}
    $myEpg->addEit( 18, {{ channel.sid }}, 3000, {{ channel.tsid }}, {{ channel.channel.id }}, 3*8, 1, "{{ channel.english_name }}") || die( "Adding of rule failed");
{% endfor %}

    # here we can add additional programs

    print "Initializing carousel database [$carouselDb]\n";
    $myCarousel->initdb() || die( "Initialization of carousel database failed");
}

# import schedule data from a file
if( $args{f}) {
    my $importFile = $args{f};

    print "Importing $importFile\n";
    importCsv( $myEpg, $importFile) || die "Error importing eventlist";
}

# build the eit and update the MPEG-2 transport stream chunk in the carousel
if( $args{b}) {
    my $pid = 18;
    my $interval = 30;  # calculate the chunk for 30 seconds

    print "Building\n";
    if( $myEpg->updateEit( $pid)) {

        # Extract the snippet
        my $pes = $myEpg->getEit( $pid, $interval);
        print "bitrate = ".( length( $pes)*8/$interval/1000)." kbps\n";
        $myCarousel->addMts( $pid, \$pes, $interval*1000);
        open( my $ts, ">", "eit.ts") || die "Error exporting TS chunk";
        binmode( $ts);
        print( $ts $pes);
        close( $ts);
    }
    else {
        print "Everything uptodate!\n";
    }
}

exit 0;

sub showHelp {
    print q{Usage: cherryEPG.pl [OPTION]

    -h             show this help
    -i             initialize EPG databases
    -f filename    import eventlist from csv file
    -b             build EIT and put in Carousel database
    -x             build EIT and export to file - FOR TESTING

    See http://epg.cherryhill.eu for additional information.
};

    exit 0;
}

sub importCsv {
    my $epg = shift;
    my $filename = shift;

    open( my $io, "<", $filename) or die( "Error opening $filename: $!");

    while( my $row = <$io>) {
        my( $program, $start, $duration, $title, $synopsis ) = csvSplit( $row);
        my $event;


        if( $start =~ /^(\d+).(\d+).(\d+)\s+(\d+):(\d+):(\d+)$/) {
            my @t = ( $6, $5, $4, $1, $2-1, $3);
            $event->{start} = timelocal(@t);
        }
        else {
            die( "Incorrect start time [$start]");
        }

        $event->{stop} = $event->{start} + $duration;

{% for channel in channels %}
    if( $program eq "{{ channel.english_name }}") { $event->{service_id} = {{ channel.sid }}; $event->{uid} = {{ channel.channel.id }}; }
{% endfor %}

#	print $event->{service_id};
#	print "\n";

        my @descriptors;
        my $short_descriptor;
        $short_descriptor->{descriptor_tag} = 0x4d; # short event descriptor
        # language code from ISO 639-2 lowercase
        $short_descriptor->{language_code} = 'rus';
        # define codepage according to Annex.2 of EN 300 468
        $short_descriptor->{codepage_prefix} = "\x10\x00\x5";
        $short_descriptor->{event_name} = $title;
        $short_descriptor->{text} = $synopsis;
        push( @descriptors, $short_descriptor);

        $event->{descriptors} = \@descriptors;

        $epg->addEvent( $event);
    }
    close( $io);
    return 1;
}

# this function is borrowed from http://stackoverflow.com/a/3068793
sub csvSplit {
    my $line = shift;

    return () unless $line;

    my @cells;
    $line =~ s/\r?\n$//;

    my $re = qr/(?:^|,)(?:"([^"]*)"|([^,]*))/;

    while($line =~ /$re/g) {
        my $value = defined $1 ? $1 : $2;
        push @cells, (defined $value ? $value : '');
    }

    return @cells;
}

